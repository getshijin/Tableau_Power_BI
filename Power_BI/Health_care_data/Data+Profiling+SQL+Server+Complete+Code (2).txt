

-- Drop the temporary table if it exists
DROP TABLE IF EXISTS #7;

-- Create a temporary table with column metadata
SELECT DISTINCT 
    column_name,
    ordinal_position,
    DATA_TYPE,
    CHARACTER_MAXIMUM_LENGTH 
INTO #7 
FROM INFORMATION_SCHEMA.columns 
WHERE table_name = 'ClinicalData';

-- Select all from the temporary table to verify
SELECT * FROM #7;

-- Add additional columns for profiling
ALTER TABLE #7 ADD Maximum NVARCHAR(MAX);  -- Changed to NVARCHAR to handle non-numeric max values
ALTER TABLE #7 ADD Minimum NVARCHAR(MAX);  -- Changed to NVARCHAR to handle non-numeric min values
ALTER TABLE #7 ADD Mean FLOAT;
ALTER TABLE #7 ADD Median FLOAT;
ALTER TABLE #7 ADD Mode NVARCHAR(MAX);  -- Changed to NVARCHAR to handle non-numeric mode values
ALTER TABLE #7 ADD [Standard Deviation] FLOAT;
ALTER TABLE #7 ADD Nulls INT;
ALTER TABLE #7 ADD [Distinct Count] INT;
ALTER TABLE #7 ADD [Zero Count] INT;  -- Add Zero Count column

DECLARE @sql NVARCHAR(MAX);
DECLARE @i INT = 1;  -- Start from 1 to match ordinal_position
DECLARE @j INT;
SET @j = (SELECT COUNT(*) FROM #7);  -- Get the number of rows

DECLARE @columnName NVARCHAR(MAX);
DECLARE @dataType NVARCHAR(MAX);

WHILE @i <= @j
BEGIN
    -- Get the column name and data type for the current ordinal position
    SELECT @columnName = column_name, @dataType = DATA_TYPE 
    FROM #7 
    WHERE ordinal_position = @i;

    -- Handle numeric columns
    IF @dataType IN ('int', 'float', 'real', 'decimal', 'numeric', 'money', 'smallint', 'tinyint')
    BEGIN
        -- Construct the dynamic SQL for calculating max, min, mean, stddev, nulls, distinct count, and zero count
        SET @sql = 'UPDATE #7 SET Maximum = (SELECT MAX(' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        SET @sql = 'UPDATE #7 SET Minimum = (SELECT MIN(' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        SET @sql = 'UPDATE #7 SET Mean = (SELECT AVG(' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        SET @sql = 'UPDATE #7 SET [Standard Deviation] = (SELECT STDEV(' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        SET @sql = 'UPDATE #7 SET Nulls = (SELECT COUNT(*) FROM ClinicalData WHERE ' + @columnName + ' IS NULL) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        SET @sql = 'UPDATE #7 SET [Distinct Count] = (SELECT COUNT(DISTINCT ' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        SET @sql = 'UPDATE #7 SET [Zero Count] = (SELECT COUNT(*) FROM ClinicalData WHERE ' + @columnName + ' = 0) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        -- Add logic for Median
        SET @sql = 'UPDATE #7 SET Median = (
            SELECT AVG(CAST(' + @columnName + ' AS FLOAT))
            FROM (
                SELECT ' + @columnName + ',
                       ROW_NUMBER() OVER (ORDER BY ' + @columnName + ') AS RowAsc,
                       COUNT(*) OVER () AS TotalCount
                FROM ClinicalData
                WHERE ' + @columnName + ' IS NOT NULL
            ) AS OrderedValues
            WHERE RowAsc IN ((TotalCount + 1) / 2, (TotalCount + 2) / 2)
        ) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        -- Add logic for Mode
        SET @sql = 'UPDATE #7 SET Mode = (
            SELECT TOP 1 ' + @columnName + '
            FROM ClinicalData
            GROUP BY ' + @columnName + '
            ORDER BY COUNT(*) DESC
        ) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;
    END

    -- Handle date columns
    IF @dataType IN ('date', 'datetime', 'datetime2', 'smalldatetime', 'time')
    BEGIN
        -- Calculate max and min
        SET @sql = 'UPDATE #7 SET Maximum = (SELECT MAX(' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        SET @sql = 'UPDATE #7 SET Minimum = (SELECT MIN(' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        -- Nulls and distinct counts
        SET @sql = 'UPDATE #7 SET Nulls = (SELECT COUNT(*) FROM ClinicalData WHERE ' + @columnName + ' IS NULL) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        SET @sql = 'UPDATE #7 SET [Distinct Count] = (SELECT COUNT(DISTINCT ' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        -- Count zero values for dates (assuming a specific zero date, e.g., '1900-01-01')
        SET @sql = 'UPDATE #7 SET [Zero Count] = (SELECT COUNT(*) FROM ClinicalData WHERE ' + @columnName + ' = ''1900-01-01'') WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        -- Add logic for Mode
        SET @sql = 'UPDATE #7 SET Mode = (
            SELECT TOP 1 CONVERT(NVARCHAR, ' + @columnName + ', 120)
            FROM ClinicalData
            GROUP BY ' + @columnName + '
            ORDER BY COUNT(*) DESC
        ) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;
    END

    -- Handle non-numeric columns for max and min
    IF @dataType IN ('varchar', 'nvarchar', 'text', 'char', 'nchar')
    BEGIN
        SET @sql = 'UPDATE #7 SET Maximum = (SELECT MAX(' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        SET @sql = 'UPDATE #7 SET Minimum = (SELECT MIN(' + @columnName + ') FROM ClinicalData) WHERE ordinal_position = ' + CAST(@i AS VARCHAR(MAX));
        EXEC sp_executesql @sql;

        -- No mean, median, or standard deviation for non-numeric columns
    END

    -- Increment to the next column
    SET @i = @i + 1;  
END

-- Select the updated profiling results
SELECT * FROM #7;

-- Clean up
DROP TABLE #7;
